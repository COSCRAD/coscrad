import { isPositiveInteger } from '@coscrad/validation-constraints';
import { AggregateId } from '../../domain/types/AggregateId';
import { InternalError } from '../errors/InternalError';
import { IdManagementService } from './id-management.service';

const numberOfReservedDigits = 4;

/**
 * Incrementing the index brings this to 10**n - 1, which will have n chars when
 * converted to string. Anything beyond this will have too many characters to
 * fit the pattern.
 */
const maxIdIndex = 10 ** numberOfReservedDigits - 2;

const hardwiredUuidPrefix = '41fb2d7f-c483-4e09-a1f0-e9909a6b';

const fillerChar = '0';

const buildId = (sequentialId: number) => {
    if (!isPositiveInteger(sequentialId)) {
        throw new InternalError(`Invalid sequential id: ${sequentialId}`);
    }

    const generatedId = `${hardwiredUuidPrefix}${sequentialId
        .toString()
        .padStart(numberOfReservedDigits, fillerChar)}`;

    return generatedId;
};

export class MockIdManagementService extends IdManagementService {
    private currentIndex = 0;

    override async generate(): Promise<AggregateId> {
        if (this.currentIndex > maxIdIndex) {
            throw new InternalError(
                `You have surpassed the limit of: ${maxIdIndex} for number of IDs generated`
            );
        }

        this.currentIndex++;

        const newId = this.buildUuid();

        /**
         * Mark the newly generated id as
         * - having been generated by our system
         * - available for subsequent use
         * in the database.
         */
        await this.idRepository.create(newId);

        return newId;
    }

    private buildUuid(): string {
        return buildId(this.currentIndex);
    }
}
