// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Aggregate factories when attempting to build an instance of type: bibliographicReference from a DTO when the DTO is valid valid dto for a BibliographicReference of sub-type: Book should succeed 1`] = `
BookBibliographicReference {
  "data": BookBibliographicReferenceData {
    "abstract": "This is the abstract, NOT a general note!",
    "creators": Array [
      Object {
        "name": "Alana Duvernay",
        "type": "author",
      },
    ],
    "isbn": "978-1-895811-34-6",
    "numberOfPages": 455,
    "place": "Kennebunk Port, Maine",
    "publisher": "Atlantic Publishing",
    "title": "A Day in the Life",
    "type": "book",
    "url": "https://atlanticpublishing.com",
    "year": 1999,
  },
  "eventHistory": Array [],
  "getCompositeIdentifier": [Function],
  "id": "1",
  "published": true,
  "queryAccessControlList": AccessControlList {
    "allowedGroupIds": Array [],
    "allowedUserIds": Array [],
  },
  "type": "bibliographicReference",
}
`;

exports[`Aggregate factories when attempting to build an instance of type: bibliographicReference from a DTO when the DTO is valid valid dto for a BibliographicReference of sub-type: Court Case should succeed 1`] = `
CourtCaseBibliographicReference {
  "data": CourtCaseBibliographicReferenceData {
    "abstract": "William, June
- Nemiah Valley
- Qualifying as an expert in Tsilhqot'in written language",
    "caseName": "2002-07-08_Tsilhqot'inTitleCase",
    "court": "Supreme Court of British Columbia",
    "dateDecided": "Recorded 2002-07-08",
    "pages": "Pages 1-6",
    "type": "courtCase",
    "url": "https://www.myzoterolink.com/bogus-link-to-doc.php",
  },
  "eventHistory": Array [],
  "getCompositeIdentifier": [Function],
  "id": "3",
  "published": true,
  "queryAccessControlList": AccessControlList {
    "allowedGroupIds": Array [],
    "allowedUserIds": Array [],
  },
  "type": "bibliographicReference",
}
`;

exports[`Aggregate factories when attempting to build an instance of type: bibliographicReference from a DTO when the DTO is valid valid dto for a BibliographicReference of sub-type: Journal Article should succeed 1`] = `
JournalArticleBibliographicReference {
  "data": JournalArticleBibliographicReferenceData {
    "abstract": "An analysis of the Cariboo Chilcotin Justice inquiry.",
    "creators": Array [
      BibliographicReferenceCreator {
        "name": "Sigurd Purcell",
        "type": "author",
      },
    ],
    "doi": "10.14288/bcs.v0i19.784",
    "issn": "00052949",
    "issueDate": "Spring 2013",
    "publicationTitle": "Journal of History",
    "title": "Report on the Cariboo Chilcotin Justice inquiry",
    "type": "journalArticle",
    "url": "https://search.proquest.com/docview/1682229477/abstract/7836BCEA06014582PQ/1",
  },
  "eventHistory": Array [],
  "getCompositeIdentifier": [Function],
  "id": "23",
  "published": true,
  "queryAccessControlList": AccessControlList {
    "allowedGroupIds": Array [],
    "allowedUserIds": Array [],
  },
  "type": "bibliographicReference",
}
`;

exports[`Aggregate factories when attempting to build an instance of type: book from a DTO when the DTO is valid valid book should succeed 1`] = `
Book {
  "author": "John Doeburg",
  "eventHistory": Array [],
  "getCompositeIdentifier": [Function],
  "id": "23",
  "pages": Array [
    BookPage {
      "identifier": "1",
      "text": "foo",
      "translation": "dee foo",
    },
    BookPage {
      "identifier": "2",
      "text": "blah blah blah",
      "translation": "blahas",
    },
  ],
  "publicationDate": "2002",
  "published": true,
  "queryAccessControlList": AccessControlList {
    "allowedGroupIds": Array [],
    "allowedUserIds": Array [],
  },
  "subtitle": "The wolf's revenge",
  "title": "Three Little Pigs",
  "type": "book",
}
`;

exports[`Aggregate factories when attempting to build an instance of type: mediaItem from a DTO when the DTO is valid valid media item should succeed 1`] = `
MediaItem {
  "contributorAndRoles": Array [
    ContributorAndRole {
      "contributorId": "2",
      "role": "host",
    },
  ],
  "eventHistory": Array [],
  "getCompositeIdentifier": [Function],
  "id": "1",
  "lengthMilliseconds": 2500,
  "mimeType": "audio/mpeg",
  "published": true,
  "queryAccessControlList": AccessControlList {
    "allowedGroupIds": Array [],
    "allowedUserIds": Array [],
  },
  "title": "episode title (in language)",
  "titleEnglish": "Metal Mondays episode 1",
  "type": "mediaItem",
  "url": "https://www.metalmondays.com/1.mp3",
}
`;

exports[`Aggregate factories when attempting to build an instance of type: photograph from a DTO when the DTO is valid valid photograph should succeed 1`] = `
Photograph {
  "dimensions": PhotographDimensions {
    "heightPX": 400,
    "widthPX": 300,
  },
  "eventHistory": Array [],
  "filename": "Adiitsii-Running",
  "getCompositeIdentifier": [Function],
  "id": "0",
  "photographer": "Susie McRealart",
  "published": true,
  "queryAccessControlList": AccessControlList {
    "allowedGroupIds": Array [],
    "allowedUserIds": Array [],
  },
  "type": "photograph",
}
`;

exports[`Aggregate factories when attempting to build an instance of type: song from a DTO when the DTO is valid valid song should succeed 1`] = `
Song {
  "audioURL": "https://www.myaudio.com/lamb.mp3",
  "contributions": Array [
    ContributorAndRole {
      "contributorId": "1",
      "role": "performer",
    },
  ],
  "eventHistory": Array [],
  "getCompositeIdentifier": [Function],
  "id": "1",
  "lengthMilliseconds": 3500,
  "lyrics": "Mary had a little lamb, little lamb.",
  "published": true,
  "queryAccessControlList": AccessControlList {
    "allowedGroupIds": Array [],
    "allowedUserIds": Array [],
  },
  "startMilliseconds": 0,
  "title": "Song title in language",
  "titleEnglish": "Mary had a little lamb",
  "type": "song",
}
`;

exports[`Aggregate factories when attempting to build an instance of type: spatialFeature from a DTO when the DTO is valid valid dto for a Spatial Feature of sub-type: Line should succeed 1`] = `
Line {
  "eventHistory": Array [],
  "geometry": Object {
    "coordinates": Array [
      Array [
        1,
        2,
      ],
      Array [
        1,
        3,
      ],
      Array [
        1.5,
        3.5,
      ],
      Array [
        3,
        4.2,
      ],
    ],
    "type": "LineString",
  },
  "getCompositeIdentifier": [Function],
  "id": "1",
  "published": true,
  "queryAccessControlList": AccessControlList {
    "allowedGroupIds": Array [],
    "allowedUserIds": Array [],
  },
  "type": "spatialFeature",
}
`;

exports[`Aggregate factories when attempting to build an instance of type: spatialFeature from a DTO when the DTO is valid valid dto for a Spatial Feature of sub-type: Point should succeed 1`] = `
Point {
  "eventHistory": Array [],
  "geometry": Object {
    "coordinates": Array [
      100,
      0,
    ],
    "type": "Point",
  },
  "getCompositeIdentifier": [Function],
  "id": "100",
  "published": true,
  "queryAccessControlList": AccessControlList {
    "allowedGroupIds": Array [],
    "allowedUserIds": Array [],
  },
  "type": "spatialFeature",
}
`;

exports[`Aggregate factories when attempting to build an instance of type: spatialFeature from a DTO when the DTO is valid valid dto for a Spatial Feature of sub-type: Polygon should succeed 1`] = `
Polygon {
  "eventHistory": Array [],
  "geometry": Object {
    "coordinates": Array [
      Array [
        Array [
          1,
          3,
        ],
        Array [
          2,
          5,
        ],
        Array [
          1.5,
          3.7,
        ],
        Array [
          1.2,
          3.3,
        ],
        Array [
          1,
          3,
        ],
      ],
    ],
    "type": "Polygon",
  },
  "getCompositeIdentifier": [Function],
  "id": "300",
  "published": true,
  "queryAccessControlList": AccessControlList {
    "allowedGroupIds": Array [],
    "allowedUserIds": Array [],
  },
  "type": "spatialFeature",
}
`;

exports[`Aggregate factories when attempting to build an instance of type: term from a DTO when the DTO is valid when the dto is valid should succeed 1`] = `
Term {
  "audioFilename": undefined,
  "contributorId": "John Doe",
  "eventHistory": Array [],
  "getCompositeIdentifier": [Function],
  "id": "1",
  "published": true,
  "queryAccessControlList": AccessControlList {
    "allowedGroupIds": Array [],
    "allowedUserIds": Array [],
  },
  "sourceProject": undefined,
  "term": "Chil-term-1",
  "termEnglish": "Engl-term-1",
  "type": "term",
}
`;

exports[`Aggregate factories when attempting to build an instance of type: transcribedAudio from a DTO when the DTO is valid valid transribed audio DTO should succeed 1`] = `
TranscribedAudio {
  "audioFilename": "123.mp3",
  "eventHistory": Array [],
  "getCompositeIdentifier": [Function],
  "id": "110",
  "lengthMilliseconds": 20000,
  "published": true,
  "queryAccessControlList": AccessControlList {
    "allowedGroupIds": Array [],
    "allowedUserIds": Array [],
  },
  "startMilliseconds": 0,
  "transcript": Transcript {
    "timeRanges": Array [
      MediaTimeRange {
        "data": "There once was a little wooden boy.",
        "inPoint": 12000,
        "outPoint": 15550,
      },
      MediaTimeRange {
        "data": "His name was Pinocchio.",
        "inPoint": 18300,
        "outPoint": 19240,
      },
    ],
  },
  "type": "transcribedAudio",
}
`;

exports[`Aggregate factories when attempting to build an instance of type: vocabularyList from a DTO when the DTO is valid valid vocabulary list should succeed 1`] = `
VocabularyList {
  "entries": Array [
    VocabularyListEntry {
      "termId": "1",
      "variableValues": Object {
        "person": "11",
      },
    },
    VocabularyListEntry {
      "termId": "2",
      "variableValues": Object {
        "person": "21",
      },
    },
  ],
  "eventHistory": Array [],
  "getCompositeIdentifier": [Function],
  "id": "1",
  "name": "test VL 1 chil",
  "nameEnglish": "test VL 1 engl",
  "published": false,
  "queryAccessControlList": AccessControlList {
    "allowedGroupIds": Array [],
    "allowedUserIds": Array [],
  },
  "type": "vocabularyList",
  "variables": Array [
    Object {
      "name": "person",
      "type": "dropbox",
      "validValues": Array [
        Object {
          "display": "I",
          "value": "11",
        },
        Object {
          "display": "We",
          "value": "21",
        },
      ],
    },
  ],
}
`;
